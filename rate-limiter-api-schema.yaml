openapi: 3.0.0
info:
  title: do-rl-worker API
  version: 1.0.0
  description: |
    API for managing rate limiting rules in Cloudflare Workers.
    This API allows you to create, read, update, delete, and reorder rate limiting rules,
    as well as manage rule versions.

servers:
  - url: https://api.rate-limiter.erfianugrah.com
    description: Production server
paths:
  /config:
    get:
      summary: Get all rate limiting rules
      description: Retrieves all currently configured rate limiting rules.
      tags:
        - Rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  rules:
                    type: array
                    items:
                      $ref: '#/components/schemas/Rule'
              example:
                rules:
                  - id: "rule1"
                    name: "Basic Rate Limit"
                    description: "Limit requests to 100 per minute"
                    order: 0
                    version: 1
                    rateLimit:
                      limit: 100
                      period: 60
                    fingerprint:
                      parameters:
                        - name: "clientIP"
                    initialMatch:
                      conditions:
                        - field: "url"
                          operator: "contains"
                          value: "/api/"
                      action:
                        type: "rateLimit"
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add a new rate limiting rule
      description: Creates a new rate limiting rule with the provided configuration.
      tags:
        - Rules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRule'
            example:
              name: "API Rate Limit"
              description: "Limit API requests to 1000 per hour"
              rateLimit:
                limit: 1000
                period: 3600
              fingerprint:
                parameters:
                  - name: "clientIP"
                  - name: "headers.authorization"
              initialMatch:
                conditions:
                  - field: "url"
                    operator: "starts_with"
                    value: "/api/v1/"
                action:
                  type: "rateLimit"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /config/reorder:
    put:
      summary: Reorder rate limiting rules
      description: |
        Updates the order of rate limiting rules. The order determines the sequence
        in which rules are evaluated for incoming requests.
      tags:
        - Rules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rules:
                  type: array
                  items:
                    $ref: '#/components/schemas/Rule'
            example:
              rules:
                - id: "rule2"
                  order: 0
                - id: "rule1"
                  order: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  rules:
                    type: array
                    items:
                      $ref: '#/components/schemas/Rule'
              example:
                message: "Rules reordered successfully"
                rules:
                  - id: "rule2"
                    name: "Secondary Rate Limit"
                    order: 0
                  - id: "rule1"
                    name: "Primary Rate Limit"
                    order: 1
        '500':
          $ref: '#/components/responses/InternalServerError'
/rules/{ruleId}:
    get:
      summary: Get a specific rule
      description: Retrieves a specific rule by ID.
      tags:
        - Rules
      parameters:
        - in: path
          name: ruleId
          required: true
          schema:
            type: string
          description: The ID of the rule to get
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update an existing rate limiting rule
      description: |
        Updates an existing rate limiting rule. All fields in the rule can be updated.
        The rule's version will be incremented automatically.
      tags:
        - Rules
      parameters:
        - in: path
          name: ruleId
          required: true
          schema:
            type: string
          description: The ID of the rule to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
            example:
              id: "rule1"
              name: "Updated API Rate Limit"
              description: "Limit API requests to 1200 per hour"
              order: 0
              version: 1
              rateLimit:
                limit: 1200
                period: 3600
              fingerprint:
                parameters:
                  - name: "clientIP"
                  - name: "headers.authorization"
              initialMatch:
                conditions:
                  - field: "url"
                    operator: "starts_with"
                    value: "/api/v1/"
                action:
                  type: "rateLimit"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  rule:
                    $ref: '#/components/schemas/Rule'
              example:
                message: "Rule updated successfully"
                rule:
                  id: "rule1"
                  name: "Updated API Rate Limit"
                  description: "Limit API requests to 1200 per hour"
                  order: 0
                  version: 2
                  rateLimit:
                    limit: 1200
                    period: 3600
                  fingerprint:
                    parameters:
                      - name: "clientIP"
                      - name: "headers.authorization"
                  initialMatch:
                    conditions:
                      - field: "url"
                        operator: "starts_with"
                        value: "/api/v1/"
                    action:
                      type: "rateLimit"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a rate limiting rule
      description: Permanently removes a rate limiting rule.
      tags:
        - Rules
      parameters:
        - in: path
          name: ruleId
          required: true
          schema:
            type: string
          description: The ID of the rule to delete
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  deletedRule:
                    $ref: '#/components/schemas/Rule'
              example:
                message: "Rule deleted successfully"
                deletedRule:
                  id: "rule1"
                  name: "API Rate Limit"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    /rules/{ruleId}/revert:
      put:
        summary: Revert a rule to a previous version
        description: |
          Reverts a rule to a specified previous version. This creates a new version
          with the content of the target version.
        tags:
          - Rules
          - Versions
        parameters:
          - in: path
            name: ruleId
            required: true
            schema:
              type: string
            description: The ID of the rule to revert
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  targetVersion:
                    type: integer
              example:
                targetVersion: 1
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    rule:
                      $ref: '#/components/schemas/Rule'
                example:
                  message: "Rule reverted successfully"
                  rule:
                    id: "rule1"
                    name: "Reverted API Rate Limit"
                    version: 3
          '404':
            $ref: '#/components/responses/NotFound'
          '500':
            $ref: '#/components/responses/InternalServerError'

    /rules/{ruleId}/versions:
      get:
        summary: Get version history for a rule
        description: Retrieves the version history of a specific rule.
        tags:
          - Rules
          - Versions
        parameters:
          - in: path
            name: ruleId
            required: true
            schema:
              type: string
            description: The ID of the rule to get version history for
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    versions:
                      type: array
                      items:
                        $ref: '#/components/schemas/Version'
                example:
                  versions:
                    - version: 1
                      timestamp: "2023-05-01T12:00:00Z"
                      changes: ["Initial version"]
                      data:
                        # Rule data at version 1
                    - version: 2
                      timestamp: "2023-05-02T14:30:00Z"
                      changes: ["Updated rate limit"]
                      data:
                        # Updated rule data at version 2
          '404':
            $ref: '#/components/responses/NotFound'
          '500':
            $ref: '#/components/responses/InternalServerError'

    /_ratelimit:
      get:
        summary: Get rate limit information for the current client
        description: |
          Provides information about the current rate limit status for the client.
          This endpoint is typically used by the rate limiting worker itself and may not be directly accessible.
        tags:
          - Utility
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    limit:
                      type: integer
                      description: The maximum number of requests allowed in the current period
                    remaining:
                      type: integer
                      description: The number of requests remaining in the current period
                    reset:
                      type: integer
                      description: The time at which the current rate limit window resets, in Unix time
                    resetFormatted:
                      type: string
                      description: The formatted time at which the current rate limit window resets
                    period:
                      type: integer
                      description: The duration of the rate limit period in seconds
                example:
                  limit: 100
                  remaining: 75
                  reset: 1620000000
                  resetFormatted: "Mon, 03 May 2021 00:00:00 GMT"
                  period: 3600
    components:
      schemas:
        NewRule:
          type: object
          required:
            - name
            - description
            - rateLimit
            - fingerprint
            - initialMatch
          properties:
            name:
              type: string
              description: The name of the rate limiting rule
            description:
              type: string
              description: A description of the rule's purpose
            rateLimit:
              type: object
              properties:
                limit:
                  type: integer
                  description: The maximum number of requests allowed within the period
                period:
                  type: integer
                  description: The time period in seconds for the rate limit
            fingerprint:
              type: object
              properties:
                parameters:
                  type: array
                  items:
                    $ref: '#/components/schemas/FingerprintParameter'
              description: Parameters used to identify unique clients
            initialMatch:
              $ref: '#/components/schemas/ConditionAction'
              description: The initial condition and action for the rule
            elseIfActions:
              type: array
              items:
                $ref: '#/components/schemas/ConditionAction'
              description: Additional conditions and actions to evaluate if the initial match fails
            elseAction:
              $ref: '#/components/schemas/Action'
              description: The action to take if all conditions fail

        Rule:
          allOf:
            - $ref: '#/components/schemas/NewRule'
            - type: object
              required:
                - id
                - order
                - version
              properties:
                id:
                  type: string
                  description: Unique identifier for the rule
                order:
                  type: integer
                  description: The evaluation order of the rule
                version:
                  type: integer
                  description: The current version number of the rule

        FingerprintParameter:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              enum:
                - clientIP
                - method
                - url
                - headers.name
                - headers.nameValue
                - body
                - body.custom
                - url.protocol
                - url.hostname
                - url.port
                - url.pathname
                - url.search
                - url.hash
                - headers.accept
                - headers.cookie
                - headers.cookieNameValue
                - headers.cookieName
              description: The type of parameter to use for fingerprinting
            headerName:
              type: string
              description: The name of the header (for header-based parameters)
            headerValue:
              type: string
              description: The value of the header (for header-based parameters)
            body:
              type: string
              description: The body content (for body-based parameters)
            bodyField:
              type: string
              description: The field in the body to use (for custom body field parameters)
            bodyFieldName:
              type: string
              description: The name of the body field (for custom body field parameters)
            cookieName:
              type: string
              description: The name of the cookie (for cookie-based parameters)
            cookieValue:
              type: string
              description: The value of the cookie (for cookie-based parameters)
    ConditionAction:
          type: object
          required:
            - conditions
            - action
          properties:
            conditions:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/Condition'
                  - $ref: '#/components/schemas/ConditionGroup'
                  - $ref: '#/components/schemas/LogicalOperator'
              description: The conditions to evaluate
            action:
              $ref: '#/components/schemas/Action'
              description: The action to take if the conditions are met

          Condition:
            type: object
            required:
              - field
              - operator
              - value
            properties:
              field:
                type: string
                description: The field to evaluate in the condition
              operator:
                type: string
                enum:
                  - eq
                  - ne
                  - gt
                  - ge
                  - lt
                  - le
                  - contains
                  - not_contains
                  - starts_with
                  - ends_with
                  - matches
                description: The operator to use for comparison
              value:
                type: string
                description: The value to compare against
              headerName:
                type: string
                description: The name of the header (for header-based conditions)
              headerValue:
                type: string
                description: The value of the header (for header-based conditions)

          ConditionGroup:
            type: object
            required:
              - conditions
            properties:
              conditions:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Condition'
                    - $ref: '#/components/schemas/ConditionGroup'
                    - $ref: '#/components/schemas/LogicalOperator'
                description: A group of conditions to be evaluated together

          LogicalOperator:
            type: object
            required:
              - type
              - logic
            properties:
              type:
                type: string
                enum: [operator]
                description: Indicates that this is a logical operator
              logic:
                type: string
                enum: [and, or]
                description: The type of logical operation to perform

          Action:
            type: object
            required:
              - type
            properties:
              type:
                type: string
                enum: [rateLimit, block, customResponse, log, simulate, allow]
                description: The type of action to take
              statusCode:
                type: integer
                description: The HTTP status code to return (for customResponse)
              bodyType:
                type: string
                enum: [text, json, html]
                description: The type of body to return (for customResponse)
              body:
                type: string
                description: The body content to return (for customResponse)

          Version:
            type: object
            required:
              - version
              - timestamp
              - changes
              - data
            properties:
              version:
                type: integer
                description: The version number
              timestamp:
                type: string
                format: date-time
                description: The timestamp when this version was created
              changes:
                type: array
                items:
                  type: string
                description: A list of changes made in this version
              data:
                $ref: '#/components/schemas/Rule'
                description: The full rule data for this version

          RequestExample:
            type: object
            description: Example of a request that can be rate limited
            properties:
              method:
                type: string
                description: HTTP method of the request
              url:
                type: string
                description: URL of the request
              headers:
                type: object
                description: Headers of the request
              body:
                type: string
                description: Body of the request (if applicable)
            example:
              method: "GET"
              url: "https://api.example.com/users"
              headers:
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              body: ""
          responses:
              NotFound:
                description: The specified resource was not found
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        error:
                          type: string
                    example:
                      error: "Rule not found"

              InternalServerError:
                description: Unexpected error
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        error:
                          type: string
                        details:
                          type: string
                    example:
                      error: "An unexpected error occurred"
                      details: "Error processing request: invalid input data"

              examples:
                RuleExample:
                  value:
                    id: "rule123"
                    name: "API Rate Limit"
                    description: "Limit API requests to 100 per minute for authenticated users"
                    order: 0
                    version: 1
                    rateLimit:
                      limit: 100
                      period: 60
                    fingerprint:
                      parameters:
                        - name: "headers.authorization"
                        - name: "clientIP"
                    initialMatch:
                      conditions:
                        - field: "url"
                          operator: "starts_with"
                          value: "/api/"
                        - type: "operator"
                          logic: "and"
                        - field: "headers.authorization"
                          operator: "exists"
                      action:
                        type: "rateLimit"
                    elseIfActions:
                      - conditions:
                          - field: "url"
                            operator: "starts_with"
                            value: "/public-api/"
                        action:
                          type: "rateLimit"
                          limit: 20
                          period: 60
                    elseAction:
                      type: "allow"

              tags:
                - name: Rules
                  description: Operations for managing rate limiting rules
                - name: Versions
                  description: Operations for managing rule versions
                - name: Utility
                  description: Utility operations for the rate limiting system

              x-rate-limit:
                description: |
                  Rate limiting is not currently implemented for the API itself.
                  However, be mindful of the potential impact of frequent requests on the Durable Object.

              x-implementation-notes: |
                - The rate limiting logic is implemented using a sliding window algorithm.
                - Rule evaluation is done in order, with the first matching rule being applied.
                - Fingerprinting is used to identify unique clients based on specified parameters.
                - The Durable Object storage is used to maintain rule configurations and rate limit counters.
                - There's a maximum limit of rules that can be stored, defined by `VERSION_LIMIT` in the ConfigStorage class.
                - Changes to rules are versioned, allowing for easy rollback if needed.
                - The worker supports custom responses, allowing for flexible handling of rate-limited requests.

              x-future-enhancements:
                - Implement authentication for the configuration API to enhance security.
                - Add support for more complex rate limiting scenarios, such as tiered limits.
                - Implement caching mechanisms to reduce Durable Object reads for frequently accessed rules.
                - Add support for importing and exporting rule configurations.
                - Develop a user interface for easier management of rate limiting rules.
                - Implement analytics and reporting features for rate limiting activities.
